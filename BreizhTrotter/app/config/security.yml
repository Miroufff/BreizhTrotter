# To get started with security, check out the documentation:
# http://symfony.com/doc/current/book/security.html
security:
    role_hierarchy:
    #        # for convenience, I decided to gather Sonata roles here
    #        ROLE_SONATA_FOO_READER:
    #            - ROLE_SONATA_ADMIN_DEMO_FOO_LIST
    #            - ROLE_SONATA_ADMIN_DEMO_FOO_VIEW
    #        ROLE_SONATA_FOO_EDITOR:
    #            - ROLE_SONATA_ADMIN_DEMO_FOO_CREATE
    #            - ROLE_SONATA_ADMIN_DEMO_FOO_EDIT
    #        ROLE_SONATA_FOO_ADMIN:
    #            - ROLE_SONATA_ADMIN_DEMO_FOO_DELETE
    #            - ROLE_SONATA_ADMIN_DEMO_FOO_EXPORT
            # those are the roles I will use (less verbose)
        ROLE_ADMIN:               [ROLE_STAFF, ROLE_SONATA_FOO_EDITOR, ROLE_SONATA_FOO_ADMIN]
        ROLE_SUPER_ADMIN:         [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        ROLE_SCENARIO_LIST:       [ROLE_SCENARIO_LIST]
        ROLE_SCENARIO_EDIT:       [ROLE_SCENARIO_EDIT]
        ROLE_SCENARIO_DELETE:     [ROLE_SCENARIO_DELETE]
        ROLE_SCENARIO_VALIDATION: [ROLE_SCENARIO_VALIDATION, ROLE_SCENARIO_EDIT, ROLE_SCENARIO_DELETE]
        ROLE_EQUIPMENT:           [ROLE_EQUIPMENT]
        ROLE_MOBILITY:            [ROLE_MOBILITY]

        SONATA:
            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT

    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        fos_userbundle:
                id: fos_user.user_provider.username
        in_memory:
            memory: ~

    acl:
        connection: default

    access_decision_manager:
        strategy: unanimous

    firewalls:
        # -> custom firewall for the admin area of the URL
        admin:
            pattern:     /admin(.*)
            form_login:
                provider:      fos_userbundle
                login_path:    /admin/login
                use_forward:   false
                check_path:    /admin/login_check
                failure_path:  null
            logout:
                path:          /admin/logout
            anonymous:   true
        # -> end custom configuration

        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                csrf_provider: form.csrf_provider
                login_path:    /login
                use_forward:   false
                check_path:    /login_check
                # if you are using Symfony < 2.8, use the following config instead:
                # csrf_provider: form.csrf_provider
                failure_path:  null
            logout:       true
            anonymous:    true
            # activate different ways to authenticate

            # http_basic: ~
            # http://symfony.com/doc/current/book/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: ~
            # http://symfony.com/doc/current/cookbook/security/form_login_setup.html
    access_control:
        # URL of FOSUserBundle which need to be available to anonymous users
        - { path: ^/_wdt, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/_profiler, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # AsseticBundle paths used when using the controller for assets
        - { path: ^/js/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/css/, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # URL of FOSUserBundle which need to be available to anonymous users
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login-check$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/new$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/check-confirmation-email$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/confirm/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/confirmed$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/request-reset-password$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/send-resetting-email$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/check-resetting-email$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/reset-password/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: ROLE_ADMIN }
        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }